package hw7;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import org.junit.Before;
import org.junit.Test;

//JUnit 4 Test
public class FractionTest {

	// Instance variables numerator & denominator
	private static int num;
	private static int den;

	// Create a Fraction object and set epsilon
	Fraction Fractions;
	double epsilon;

	// Set up initial Fraction instance
	@Before
	public void setUp() {
		Fractions = new Fraction(num, den);
		epsilon = 0.00000000001;
	}

	// Test reduceToLowestForm

	@Test
	public void testReduceToLowestFormWhenInLowestForm() {
		Fraction testFraction = new Fraction(2, 3);
		testFraction.reduceToLowestForm(testFraction.numerator, testFraction.denominator);
		assertTrue("Should return itself if already in lowest form", testFraction.numerator == 2);
		assertTrue("Should return itself if already in lowest form", testFraction.denominator == 3);
	}

	@Test
	public void testReduceToLowestFormWhenNotInLowestForm() {
		Fraction testFraction = new Fraction(4, 16);
		testFraction.reduceToLowestForm(testFraction.numerator, testFraction.denominator);
		assertTrue("Fraction should be reduced to lowest form", testFraction.numerator == 1);
		assertTrue("Fraction should be reduced to lowest form", testFraction.denominator == 4);
	}

	@Test
	public void testReduceToLowestFormWithNegative() {
		Fraction testFraction = new Fraction(3, -4);
		testFraction.reduceToLowestForm(testFraction.numerator, testFraction.denominator);
		assertTrue("Negative signs should be moved to the numerator", testFraction.numerator == -3);
		assertTrue("Negative signs should be moved to the numerator", testFraction.denominator == 4);
	}

	@Test
	public void testReduceToLowestFormWithZero() {
		Fraction testFraction = new Fraction(0, 5);
		testFraction.reduceToLowestForm(testFraction.numerator, testFraction.denominator);
		assertTrue("0/n should be reduced to 0/1", testFraction.numerator == 0);
		assertTrue("0/n should be reduced to 0/1", testFraction.denominator == 1);
	}

	@Test
	public void testReduceToLowestFormWithConstants() {
		Fraction testFraction = new Fraction(49, 7);
		testFraction.reduceToLowestForm(testFraction.numerator, testFraction.denominator);
		assertTrue("Constants should be reduced to n/1", testFraction.numerator == 7);
		assertTrue("Constants should be reduced to n/1", testFraction.denominator == 1);
	}

	// Test add

	@Test
	public void testAddWhenResultInLowestForm() {
		Fraction Fraction1 = new Fraction(1, 3);
		Fraction Fraction2 = new Fraction(1, 3);
		Fraction addedFractions = Fraction1.add(Fraction2);
		assertTrue("Fractions should be added properly", addedFractions.numerator == 2);
		assertTrue("Fractions should be added properly", addedFractions.denominator == 3);
	}

	@Test
	public void testAddWhenResultNotInLowestForm() {
		Fraction Fraction1 = new Fraction(1, 3);
		Fraction Fraction2 = new Fraction(5, 3);
		Fraction addedFractions = Fraction1.add(Fraction2);
		assertTrue("Fractions should be reduced to lowest form", addedFractions.numerator == 2);
		assertTrue("Fractions should be reduced to lowest form", addedFractions.denominator == 1);
	}

	@Test
	public void testAddWhenResultIsZero() {
		Fraction Fraction1 = new Fraction(-1, 3);
		Fraction Fraction2 = new Fraction(1, 3);
		Fraction addedFractions = Fraction1.add(Fraction2);
		assertTrue("If Fractions add to zero, result should be 0/1", addedFractions.numerator == 0);
		assertTrue("If Fractions add to zero, result should be 0/1", addedFractions.denominator == 1);
	}

	@Test
	public void testAddWithNegatives() {
		Fraction Fraction1 = new Fraction(4, -3);
		Fraction Fraction2 = new Fraction(2, 3);
		Fraction addedFractions = Fraction1.add(Fraction2);
		assertTrue("Negative signs should be moved to numerator", addedFractions.numerator == -2);
		assertTrue("Negative signs should be moved to numerator", addedFractions.denominator == 3);
	}

	// Test subtract

	@Test
	public void testSubtractWhenResultInLowestForm() {
		Fraction Fraction1 = new Fraction(2, 3);
		Fraction Fraction2 = new Fraction(1, 3);
		Fraction subtractedFractions = Fraction1.subtract(Fraction2);
		assertTrue("Fractions should be subtracted properly", subtractedFractions.numerator == 1);
		assertTrue("Fractions should be subtracted properly", subtractedFractions.denominator == 3);
	}

	@Test
	public void testSubtractWhenResultNotInLowestForm() {
		Fraction Fraction1 = new Fraction(13, 4);
		Fraction Fraction2 = new Fraction(1, 4);
		Fraction subtractedFractions = Fraction1.subtract(Fraction2);
		assertTrue("Fractions should be reduced to lowest form", subtractedFractions.numerator == 3);
		assertTrue("Fractions should be reduced to lowest form", subtractedFractions.denominator == 1);
	}

	@Test
	public void testSubtractWhenResultIsZero() {
		Fraction Fraction1 = new Fraction(1, 3);
		Fraction Fraction2 = new Fraction(1, 3);
		Fraction subtractedFractions = Fraction1.subtract(Fraction2);
		assertTrue("If Fractions subtract to zero, result should be 0/1", subtractedFractions.numerator == 0);
		assertTrue("If Fractions subtract to zero, result should be 0/1", subtractedFractions.denominator == 1);
	}

	@Test
	public void testSubtractWhenResultIsNegative() {
		Fraction Fraction1 = new Fraction(2, 3);
		Fraction Fraction2 = new Fraction(3, 3);
		Fraction subtractedFractions = Fraction1.subtract(Fraction2);
		assertTrue("Negative signs should be moved to numerator", subtractedFractions.numerator == -1);
		assertTrue("Negative signs should be moved to numerator", subtractedFractions.denominator == 3);
	}

	// Test multiply

	@Test
	public void testMultiplyWhenResultInLowestForm() {
		Fraction Fraction1 = new Fraction(1, 3);
		Fraction Fraction2 = new Fraction(2, 3);
		Fraction multipliedFractions = Fraction1.mul(Fraction2);
		assertTrue("Fractions should be multiplied correctly", multipliedFractions.numerator == 2);
		assertTrue("Fractions should be multiplied correctly", multipliedFractions.denominator == 9);
	}

	@Test
	public void testMultiplyWhenResultNotInLowestForm() {
		Fraction Fraction1 = new Fraction(3, 3);
		Fraction Fraction2 = new Fraction(2, 3);
		Fraction multipliedFractions = Fraction1.mul(Fraction2);
		assertTrue("Fractions should be reduced to lowest form", multipliedFractions.numerator == 2);
		assertTrue("Fractions should be reduced to lowest form", multipliedFractions.denominator == 3);
	}

	@Test
	public void testMultiplyWhenDenIsNegative() {
		Fraction Fraction1 = new Fraction(1, -3);
		Fraction Fraction2 = new Fraction(2, 3);
		Fraction multipliedFractions = Fraction1.mul(Fraction2);
		assertTrue("Negative signs should be moved to numerator", multipliedFractions.numerator == -2);
		assertTrue("Negative signs should be moved to numerator", multipliedFractions.denominator == 9);
	}

	@Test
	public void testMultiplyWhenNumIsNegative() {
		Fraction Fraction1 = new Fraction(-1, 3);
		Fraction Fraction2 = new Fraction(2, 3);
		Fraction multipliedFractions = Fraction1.mul(Fraction2);
		assertTrue("Negative signs should be in numerator", multipliedFractions.numerator == -2);
		assertTrue("Negative signs should be in numerator", multipliedFractions.denominator == 9);
	}

	@Test
	public void testMultiplyWhenBothAreNegative() {
		Fraction Fraction1 = new Fraction(1, -3);
		Fraction Fraction2 = new Fraction(-2, 3);
		Fraction multipliedFractions = Fraction1.mul(Fraction2);
		assertTrue("Two negative Fractions should multiply to a positive Fraction", multipliedFractions.numerator == 2);
		assertTrue("Two negative Fractions should multiply to a positive Fraction",
				multipliedFractions.denominator == 9);
	}

	@Test
	public void testMultiplyWithZero() {
		Fraction Fraction1 = new Fraction(55, -3);
		Fraction Fraction2 = new Fraction(0, 3);
		Fraction multipliedFractions = Fraction1.mul(Fraction2);
		assertTrue("Any Fraction multiplied by 0 should be 0/1", multipliedFractions.numerator == 0);
		assertTrue("Any Fraction multiplied by 0 should be 0/1", multipliedFractions.denominator == 1);
	}

	@Test
	public void testMultiplyWithOne() {
		Fraction Fraction1 = new Fraction(1, -3);
		Fraction Fraction2 = new Fraction(1, 1);
		Fraction multipliedFractions = Fraction1.mul(Fraction2);
		assertTrue("A Fraction multiplied by one is itself", multipliedFractions.numerator == -1);
		assertTrue("A Fraction multiplied by one is itself", multipliedFractions.denominator == 3);
	}

	// Test divide
	@Test
	public void testDivideWhenInLowestForm() {
		Fraction Fraction1 = new Fraction(1, 3);
		Fraction Fraction2 = new Fraction(2, 3);
		Fraction dividedFractions = Fraction1.div(Fraction2);
		assertTrue("Fractions should be divided properly", dividedFractions.numerator == 1);
		assertTrue("Fractions should be divided properly", dividedFractions.denominator == 2);
	}

	@Test
	public void testDivideWhenNotInLowestForm() {
		Fraction Fraction1 = new Fraction(1, 3);
		Fraction Fraction2 = new Fraction(5, 3);
		Fraction dividedFractions = Fraction1.div(Fraction2);
		assertTrue("Fractions should be reduced to lowest form", dividedFractions.numerator == 1);
		assertTrue("Fractions should be reduced to lowest form", dividedFractions.denominator == 5);
	}

	@Test
	public void testDivideWhenOneIsNegative() {
		Fraction Fraction1 = new Fraction(1, 3);
		Fraction Fraction2 = new Fraction(2, -3);
		Fraction dividedFractions = Fraction1.div(Fraction2);
		assertTrue("Negative signs should be in numerator", dividedFractions.numerator == -1);
		assertTrue("Negative signs should be in numerator", dividedFractions.denominator == 2);
	}

	@Test
	public void testDivideWhenBothAreNegative() {
		Fraction Fraction1 = new Fraction(1, -3);
		Fraction Fraction2 = new Fraction(-2, 3);
		Fraction dividedFractions = Fraction1.div(Fraction2);
		assertTrue("Two negative Fractions divide to a positive result", dividedFractions.numerator == 1);
		assertTrue("Two negative Fractions divide to a positive result", dividedFractions.denominator == 2);
	}

	@Test
	public void testDivideWhenResultIsOne() {
		Fraction Fraction1 = new Fraction(1, 3);
		Fraction Fraction2 = new Fraction(1, 3);
		Fraction dividedFractions = Fraction1.div(Fraction2);
		assertTrue("A Fraction divided by itself results in 1/1", dividedFractions.numerator == 1);
		assertTrue("A Fraction divided by itself results in 1/1", dividedFractions.denominator == 1);
	}

	// Test decimal
	@Test
	public void testDecimal() {
		Fraction Fraction = new Fraction(1, 4);
		double expected = 0.25;
		assertEquals("Decimal should be positive when Fraction is positive", expected, Fraction.decimal(), epsilon);
	}

	@Test
	public void testDecimalWithNegative() {
		Fraction Fraction = new Fraction(1, -4);
		double expected = -0.25;
		assertEquals("Decimal should be negative when Fraction is negative", expected, Fraction.decimal(), epsilon);
	}

	@Test
	public void testDecimalWithZero() {
		Fraction Fraction = new Fraction(0, 1);
		double expected = 0.00;
		assertEquals("Decimal should be 0.0 when Fraction is 0", expected, Fraction.decimal(), epsilon);
	}

	@Test
	public void testDecimalWithRepeatingNumber() {
		Fraction Fraction = new Fraction(1, -3);
		double expected = -0.33333333333;
		assertEquals("Decimal should have repeating digits", expected, Fraction.decimal(), epsilon);
	}

	// Test sqr
	@Test
	public void testSqr() {
		Fraction Fraction = new Fraction(1, 3);
		Fraction.sqr();
		assertTrue("Fraction should be squared properly", Fraction.numerator == 1);
		assertTrue("Fraction should be squared properly", Fraction.denominator == 9);
	}

	@Test
	public void testSqrResultNotInLowestForm() {
		Fraction Fraction = new Fraction(2, 4);
		Fraction.sqr();
		assertTrue("Fraction should NOT be reduced to lowest form", Fraction.numerator == 4);
		assertTrue("Fraction should NOT be reduced to lowest form", Fraction.denominator == 16);
	}

	@Test
	public void testSqrWithNegativeDenominator() {
		Fraction Fraction = new Fraction(1, -4);
		Fraction.sqr();
		assertTrue("Any integer squared is positive", Fraction.numerator == 1);
		assertTrue("Any integer squared is positive", Fraction.denominator == 16);
	}

	@Test
	public void testSqrWithBothNegative() {
		Fraction Fraction = new Fraction(-3, -4);
		Fraction.sqr();
		assertTrue("Any integer squared is positive", Fraction.numerator == 9);
		assertTrue("Any integer squared is positive", Fraction.denominator == 16);
	}

	@Test
	public void testSqrWithZero() {
		Fraction Fraction = new Fraction(0, 4);
		Fraction.sqr();
		assertTrue("Zero squared is zero", Fraction.numerator == 0);
		assertTrue("Zero squared is zero", Fraction.denominator == 16);
	}

	// Test toString

	@Test
	public void testToString() {
		Fraction testFraction = new Fraction(1, 3);
		String expected = "1/3";
		assertEquals("Should return the Fraction as a string", expected, testFraction.toString());
	}

	@Test
	public void testToStringOneNegative() {
		Fraction testFraction = new Fraction(1, -3);
		String expected = "-1/3";
		assertEquals("Should return the negative sign in numerator", expected, testFraction.toString());
	}

	@Test
	public void testToStringBothNegative() {
		Fraction testFraction = new Fraction(-1, -3);
		String expected = "1/3";
		assertEquals("Should return the negative sign in numerator", expected, testFraction.toString());
	}

	@Test
	public void testToStringWithZero() {
		Fraction testFraction = new Fraction(0, -3);
		String expected = "0/3";
		assertEquals("Should get rid of the negative sign if Fraction of form 0/n", expected, testFraction.toString());
	}

	// Test average (two Fractions)

	@Test
	public void testAverage() {
		Fraction Fraction1 = new Fraction(1, 3);
		Fraction Fraction2 = new Fraction(2, 3);
		Fraction avgFractions = Fraction1.average(Fraction2);
		assertTrue("Fractions should be averaged properly", avgFractions.numerator == 1);
		assertTrue("Fractions should be averaged properly", avgFractions.denominator == 2);
	}

	@Test
	public void testAvgWhenOneIsZero() {
		Fraction Fraction1 = new Fraction(0, 3);
		Fraction Fraction2 = new Fraction(2, 3);
		Fraction avgFractions = Fraction1.average(Fraction2);
		assertTrue("Fractions should be averaged properly when one is zero", avgFractions.numerator == 1);
		assertTrue("Fractions should be averaged properly when one is zero", avgFractions.denominator == 3);
	}

	@Test
	public void testAverageWhenBothZero() {
		Fraction Fraction1 = new Fraction(0, 6);
		Fraction Fraction2 = new Fraction(0, 4);
		Fraction avgFractions = Fraction1.average(Fraction2);
		assertTrue("Average of two zero Fractions should be zero", avgFractions.numerator == 0);
		assertTrue("Average of two zero Fractions should be zero", avgFractions.denominator == 1);
	}

	@Test
	public void testAverageWithOneNegative() {
		Fraction Fraction1 = new Fraction(-5, 8);
		Fraction Fraction2 = new Fraction(2, 9);
		Fraction avgFractions = Fraction1.average(Fraction2);
		assertTrue("Fractions should be averaged properly when one is negative", avgFractions.numerator == -29);
		assertTrue("Fractions should be averaged properly when one is negative", avgFractions.denominator == 144);
	}

	@Test
	public void testAverageWithBothNegative() {
		Fraction Fraction1 = new Fraction(-1, 6);
		Fraction Fraction2 = new Fraction(2, -3);
		Fraction avgFractions = Fraction1.average(Fraction2);
		assertTrue("Fractions should be averaged properly when both are negative", avgFractions.numerator == -5);
		assertTrue("Fractions should be averaged properly when both are negative", avgFractions.denominator == 12);
	}

	// Test average (Fraction array)

	@Test
	public void testAverageFractionArrayWhenEmpty() {
		Fraction[] Fractions = {};
		Fraction avgFractions = Fraction.average(Fractions);
		assertTrue("Average of an empty array should be 0/1", avgFractions.numerator == 0);
		assertTrue("Average of an empty array should be 0/1", avgFractions.denominator == 1);
	}

	@Test
	public void testAverageFractionArrayWithOneElement() {
		Fraction Fraction1 = new Fraction(1, 2);
		Fraction[] Fractions = { Fraction1 };
		Fraction avgFractions = Fraction.average(Fractions);
		assertTrue("Average of a one-element array should be that element", avgFractions.numerator == 1);
		assertTrue("Average of a one-element array should be that element", avgFractions.denominator == 2);
	}

	@Test
	public void testAverageFractionArrayOfSameElements() {
		Fraction Fraction1 = new Fraction(1, 2);
		Fraction Fraction2 = new Fraction(1, 2);
		Fraction Fraction3 = new Fraction(1, 2);
		Fraction[] Fractions = { Fraction1, Fraction2, Fraction3 };
		Fraction avgFractions = Fraction.average(Fractions);
		assertTrue("Average of an array of all the same elements should be that element", avgFractions.numerator == 1);
		assertTrue("Average of an array of all the same elements should be that element",
				avgFractions.denominator == 2);
	}

	@Test
	public void testAverageFractionArrayOfDifferentElements() {
		Fraction Fraction1 = new Fraction(1, 2);
		Fraction Fraction2 = new Fraction(3, 5);
		Fraction Fraction3 = new Fraction(6, 8);
		Fraction[] Fractions = { Fraction1, Fraction2, Fraction3 };
		Fraction avgFractions = Fraction.average(Fractions);
		assertTrue("Takes the average properly", avgFractions.numerator == 37);
		assertTrue("Takes the average properly", avgFractions.denominator == 60);
	}

	// Test average (integer array)

	@Test
	public void testAverageIntegerArrayWhenEmpty() {
		int[] Fractions = {};
		Fraction avgInteger = Fraction.average(Fractions);
		assertTrue("Average of an empty array should be 0/1", avgInteger.numerator == 0);
		assertTrue("Average of an empty array should be 0/1", avgInteger.denominator == 1);
	}

	@Test
	public void testAverageIntegerArrayWithOneElement() {
		int[] Fractions = { 3 };
		Fraction avgInteger = Fraction.average(Fractions);
		assertTrue("Average of a one-element array should be that element", avgInteger.numerator == 3);
		assertTrue("Average of a one-element array should be that element", avgInteger.denominator == 1);
	}

	@Test
	public void testAverageIntegerArrayWithSameElements() {
		int[] Fractions = { 3, 3, 3 };
		Fraction avgInteger = Fraction.average(Fractions);
		assertTrue("Average of an array of all the same elements should be that element", avgInteger.numerator == 3);
		assertTrue("Average of an array of all the same elements should be that element", avgInteger.denominator == 1);
	}

	@Test
	public void testAverageIntegerArrayOfPositives() {
		int[] Fractions = { 51, 101, 602, 71, 51, 0, 34, 51, 9 };
		Fraction avgInteger = Fraction.average(Fractions);
		assertTrue("Takes the average of positive elements properly", avgInteger.numerator == 970);
		assertTrue("Takes the average of positive elements properly", avgInteger.denominator == 9);
	}

	@Test
	public void testAverageIntegerArrayOfNegatives() {
		int[] Fractions = { -51, -101, -602, -71, -51, 0, -34, -51, -9 };
		Fraction avgInteger = Fraction.average(Fractions);
		assertTrue("Takes the average of negative elements properly", avgInteger.numerator == -970);
		assertTrue("Takes the average of negative elements properly", avgInteger.denominator == 9);
	}

	@Test
	public void testAverageIntegerArrayPositivesAndNegatives() {
		int[] Fractions = { -5, 2, -6, 7, 0 };
		Fraction avgInteger = Fraction.average(Fractions);
		assertTrue("Takes the average of both negative & positive elements properly", avgInteger.numerator == -2);
		assertTrue("Takes the average of both negative & positive elements properly", avgInteger.denominator == 5);
	}

}