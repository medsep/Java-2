package hw7;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertNotSame;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

class FractionTest {

	double delta;

	@BeforeEach
	public void setUp() {
		this.delta = 0.000001;
	}

	@Test
	void testFractions() {

		Fraction Fraction = new Fraction(4, 16);
		assertEquals(4, Fraction.numerator);
		assertEquals(16, Fraction.denominator);

		Fraction = new Fraction(4, -16);
		assertEquals(-4, Fraction.numerator);
		assertEquals(16, Fraction.denominator);

		Fraction = new Fraction(-35, 60);
		assertNotEquals(35, Fraction.numerator);
		assertNotEquals(35, Fraction.denominator);
		assertEquals(-35, Fraction.numerator);
		assertEquals(60, Fraction.denominator);

		Fraction = new Fraction(-35, -60);
		assertNotEquals(-35, Fraction.numerator);
		assertNotEquals(-35, Fraction.denominator);
		assertEquals(35, Fraction.numerator);
		assertEquals(60, Fraction.denominator);

		// Test with negative numerator and denominator.
		Fraction = new Fraction(-6, -6);
		assertNotEquals(-6, Fraction.numerator);
		assertNotEquals(-6, Fraction.denominator);
		assertEquals(6, Fraction.numerator);
		assertEquals(6, Fraction.denominator);

	}

	@Test
	void testReduceToLowestForm() {
		Fraction Fraction = new Fraction(4, 16);
		Fraction.reduceToLowestForm();

		assertEquals(1, Fraction.numerator);
		assertEquals(4, Fraction.denominator);

		Fraction = new Fraction(0, 4);
		Fraction.reduceToLowestForm();

		assertEquals(0, Fraction.numerator);
		assertEquals(1, Fraction.denominator);

		Fraction = new Fraction(-25, -100);
		Fraction.reduceToLowestForm();
		assertEquals(1, Fraction.numerator);
		assertEquals(4, Fraction.denominator);
		assertNotEquals(25, Fraction.numerator);
		assertNotEquals(100, Fraction.denominator);

	}

	@Test
	void testAdd() {
		Fraction Fraction1 = new Fraction(4, 16);
		Fraction Fraction2 = new Fraction(5, 16);
		Fraction newFraction = Fraction1.add(Fraction2);
		assertEquals(9, newFraction.numerator);
		assertEquals(16, newFraction.denominator);
		assertNotSame(newFraction, Fraction1);
		assertNotSame(newFraction, Fraction2);

		Fraction1 = new Fraction(3, 7);
		Fraction2 = new Fraction(2, 7);
		newFraction = Fraction1.add(Fraction2);
		assertEquals(5, newFraction.numerator);
		assertEquals(7, newFraction.denominator);
		assertNotSame(newFraction, Fraction1);
		assertNotSame(newFraction, Fraction2);

		// Here we test with unfactored numbers, in both
		// denominator and numerator.
		Fraction1 = new Fraction(10, 50);
		Fraction2 = new Fraction(20, 50);
		newFraction = Fraction1.add(Fraction2);
		assertEquals(3, newFraction.numerator);
		assertEquals(5, newFraction.denominator);
		assertNotSame(newFraction, Fraction1);
		assertNotSame(newFraction, Fraction2);
		assertNotEquals(30, newFraction.numerator);
		assertNotEquals(50, newFraction.denominator);

		// Here we test with negative numbers, in both
		// numerator.
		Fraction1 = new Fraction(10, 50);
		Fraction2 = new Fraction(-20, 50);
		newFraction = Fraction1.add(Fraction2);
		assertEquals(-1, newFraction.numerator);
		assertEquals(5, newFraction.denominator);
		assertNotSame(newFraction, Fraction1);
		assertNotSame(newFraction, Fraction2);
		assertNotEquals(30, newFraction.numerator);
		assertNotEquals(50, newFraction.denominator);

		// Here we test with negative numbers, in both
		// denominator and numerator.
		Fraction1 = new Fraction(10, -50);
		Fraction2 = new Fraction(-20, 50);
		newFraction = Fraction1.add(Fraction2);
		assertEquals(-3, newFraction.numerator);
		assertEquals(5, newFraction.denominator);
		assertNotSame(newFraction, Fraction1);
		assertNotSame(newFraction, Fraction2);
		assertNotEquals(30, newFraction.numerator);
		assertNotEquals(-50, newFraction.denominator);

	}

	@Test
	void testSubtract() {

		Fraction Fraction1 = new Fraction(4, 16);
		Fraction Fraction2 = new Fraction(5, 16);
		Fraction newFraction = Fraction1.subtract(Fraction2);
		assertEquals(-1, newFraction.numerator);
		assertEquals(16, newFraction.denominator);

		Fraction1 = new Fraction(5, 9);
		Fraction2 = new Fraction(3, 9);
		newFraction = Fraction1.subtract(Fraction2);
		assertEquals(2, newFraction.numerator);
		assertEquals(9, newFraction.denominator);

		// Test with unreduced numbers and negatives in
		// numerator.
		Fraction1 = new Fraction(-5, 100);
		Fraction2 = new Fraction(3, 50);
		newFraction = Fraction1.subtract(Fraction2);
		assertEquals(-11, newFraction.numerator);
		assertEquals(100, newFraction.denominator);
		assertNotSame(newFraction, Fraction1);
		assertNotSame(newFraction, Fraction2);
		assertNotEquals(-55, newFraction.numerator);
		assertNotEquals(500, newFraction.denominator);

		// Test with 2 large numbers which can be reduced
		// and negatives in the denominator.
		Fraction1 = new Fraction(5, -100);
		Fraction2 = new Fraction(3, -500);
		newFraction = Fraction1.subtract(Fraction2);
		assertEquals(-11, newFraction.numerator);
		assertEquals(250, newFraction.denominator);
		assertNotSame(newFraction, Fraction1);
		assertNotSame(newFraction, Fraction2);
		assertNotEquals(-22, newFraction.numerator);
		assertNotEquals(500, newFraction.denominator);

	}

	@Test
	void testMul() {

		Fraction Fraction1 = new Fraction(4, 16);
		Fraction Fraction2 = new Fraction(5, 16);
		Fraction newFraction = Fraction1.mul(Fraction2);
		assertEquals(5, newFraction.numerator);
		assertEquals(64, newFraction.denominator);

		Fraction1 = new Fraction(5, 9);
		Fraction2 = new Fraction(3, 9);
		newFraction = Fraction1.mul(Fraction2);
		assertEquals(5, newFraction.numerator);
		assertEquals(27, newFraction.denominator);

		// test with unreduced form and negatives in denominator.
		Fraction1 = new Fraction(3, -4);
		Fraction2 = new Fraction(2, -8);
		newFraction = Fraction1.mul(Fraction2);
		assertEquals(3, newFraction.numerator);
		assertEquals(16, newFraction.denominator);
		assertNotSame(newFraction, Fraction1);
		assertNotSame(newFraction, Fraction2);
		assertNotEquals(6, newFraction.numerator);
		assertNotEquals(32, newFraction.denominator);

		// test with unreduced form and negatives in denominator.
		Fraction1 = new Fraction(30, -12);
		Fraction2 = new Fraction(20, -5);
		newFraction = Fraction1.mul(Fraction2);
		assertEquals(10, newFraction.numerator);
		assertEquals(1, newFraction.denominator);
		assertNotSame(newFraction, Fraction1);
		assertNotSame(newFraction, Fraction2);
		assertNotEquals(6, newFraction.numerator);
		assertNotEquals("", newFraction.denominator);

		// test with unreduced form and negatives in numerator.
		Fraction1 = new Fraction(-30, -12);
		Fraction2 = new Fraction(20, -5);
		newFraction = Fraction1.mul(Fraction2);
		assertEquals(-10, newFraction.numerator);
		assertEquals(1, newFraction.denominator);
		assertNotSame(newFraction, Fraction1);
		assertNotSame(newFraction, Fraction2);
		assertNotEquals(-600, newFraction.numerator);
		assertNotEquals(60, newFraction.denominator);

	}

	@Test
	void testDiv() {
		Fraction Fraction1 = new Fraction(4, 16);
		Fraction Fraction2 = new Fraction(5, 16);
		Fraction newFraction = Fraction1.div(Fraction2);
		assertEquals(4, newFraction.numerator);
		assertEquals(5, newFraction.denominator);

		Fraction1 = new Fraction(5, 9);
		Fraction2 = new Fraction(3, 9);
		newFraction = Fraction1.div(Fraction2);
		assertEquals(5, newFraction.numerator);
		assertEquals(3, newFraction.denominator);

		// test with unreduced form and negatives in numerator.
		Fraction1 = new Fraction(-30, -3);
		Fraction2 = new Fraction(5, -5);
		newFraction = Fraction1.div(Fraction2);
		assertEquals(-10, newFraction.numerator);
		assertEquals(1, newFraction.denominator);
		assertNotSame(newFraction, Fraction1);
		assertNotSame(newFraction, Fraction2);
		assertNotEquals(-150, newFraction.numerator);
		assertNotEquals(15, newFraction.denominator);

		// test with unreduced form and negatives in denominator.
		Fraction1 = new Fraction(30, -5);
		Fraction2 = new Fraction(2, -10);
		newFraction = Fraction1.div(Fraction2);
		assertEquals(30, newFraction.numerator);
		assertEquals(1, newFraction.denominator);
		assertNotSame(newFraction, Fraction1);
		assertNotSame(newFraction, Fraction2);
		assertNotEquals(300, newFraction.numerator);
		assertNotEquals(10, newFraction.denominator);

		// test with unreduced form and negatives in denominator.
		Fraction1 = new Fraction(30, -10);
		Fraction2 = new Fraction(15, -5);
		newFraction = Fraction1.div(Fraction2);
		assertEquals(1, newFraction.numerator);
		assertEquals(1, newFraction.denominator);
		assertNotSame(newFraction, Fraction1);
		assertNotSame(newFraction, Fraction2);
		assertNotEquals(6, newFraction.numerator);
		assertNotEquals("", newFraction.denominator);

	}

	@Test
	void testDecimal() {
		Fraction Fraction1 = new Fraction(4, 16);
		double dec = Fraction1.decimal();
		assertEquals(.25, dec, this.delta);

		Fraction1 = new Fraction(5, 16);
		dec = Fraction1.decimal();
		assertEquals(.3125, dec, this.delta);

		// Test a negative prime fraction
		Fraction1 = new Fraction(1, -13);
		dec = Fraction1.decimal();
		assertEquals(-.076923, dec, this.delta);
		assertNotEquals(-.077, dec, this.delta);

		// Test a prime fraction
		Fraction1 = new Fraction(1, 17);
		dec = Fraction1.decimal();
		assertEquals(.058823, dec, this.delta);
		assertNotEquals(.059, dec, this.delta);

		// Test a recurring fraction with double negative
		Fraction1 = new Fraction(-1, -3);
		dec = Fraction1.decimal();
		assertEquals(.333333, dec, this.delta);
		assertNotEquals(.3, dec, this.delta);
	}

	@Test
	void testSqr() {
		Fraction Fraction1 = new Fraction(2, 3);
		Fraction1.sqr();
		assertEquals(4, Fraction1.numerator);
		assertEquals(9, Fraction1.denominator);

		Fraction1 = new Fraction(4, 16);
		Fraction1.sqr();
		assertEquals(1, Fraction1.numerator);
		assertEquals(16, Fraction1.denominator);

		// Test a couple of perfect squares with a negative
		Fraction1 = new Fraction(-4, 5);
		Fraction1.sqr();
		assertEquals(16, Fraction1.numerator);
		assertEquals(25, Fraction1.denominator);
		assertNotEquals(-16, Fraction1.numerator);
		assertNotEquals(-25, Fraction1.denominator);

		// Test a couple of squares with negative which are reducible
		Fraction1 = new Fraction(-8, -10);
		Fraction1.sqr();
		assertEquals(16, Fraction1.numerator);
		assertEquals(25, Fraction1.denominator);
		assertNotEquals(-16, Fraction1.numerator);
		assertNotEquals(-25, Fraction1.denominator);

		// Test a couple of large squares with negative which are reducible
		Fraction1 = new Fraction(-1000, -5000);
		Fraction1.sqr();
		assertEquals(1, Fraction1.numerator);
		assertEquals(25, Fraction1.denominator);
		assertNotEquals(1000000, Fraction1.numerator);
		assertNotEquals(25000000, Fraction1.denominator);
	}

	@Test
	void testEquals() {
		Fraction Fraction1 = new Fraction(2, 3);
		Fraction Fraction2 = new Fraction(2, 3);
		assertEquals(Fraction1, Fraction2);

		Fraction1 = new Fraction(4, 16);
		Fraction2 = new Fraction(1, 4);
		assertEquals(Fraction1, Fraction2);

		// confirm the Fractions were not (permanently) reduced to lowest form
		assertEquals(4, Fraction1.numerator);
		assertEquals(16, Fraction1.denominator);
		assertEquals(1, Fraction2.numerator);
		assertEquals(4, Fraction2.denominator);

	}

	@Test
	void testToString() {
		Fraction Fraction1 = new Fraction(2, 3);
		String str = Fraction1.toString();
		assertEquals("2/3", str);

		Fraction Fraction2 = new Fraction(2, 3);
		String str1 = Fraction2.toString();
		assertNotEquals("1/3", str);

		Fraction Fraction3 = new Fraction(8, 10);
		String str3 = Fraction3.toString();
		assertEquals("4/5", str);

	}

	@Test
	void testAverageFraction() {
		Fraction Fraction1 = new Fraction(1, 2);
		Fraction otherFraction = new Fraction(3, 4);
		Fraction avgFraction = Fraction1.average(otherFraction);

		assertEquals(5, avgFraction.numerator);
		assertEquals(8, avgFraction.denominator);

	}

	@Test
	void testAverageFractionArray() {

		Fraction Fraction1 = new Fraction(3, 4);
		Fraction Fraction2 = new Fraction(3, 5);
		Fraction Fraction3 = new Fraction(3, 6);

		Fraction[] Fractions = new Fraction[] { Fraction1, Fraction2, Fraction3 };
		Fraction avgFraction = Fraction.average(Fractions);

		assertEquals(37, avgFraction.numerator);
		assertEquals(60, avgFraction.denominator);

	}

	@Test
	void testAverageIntArray() {

		int[] ints = new int[] { 1, 2, 3, 4 };
		Fraction avgFraction = Fraction.average(ints);

		assertEquals(5, avgFraction.numerator);
		assertEquals(2, avgFraction.denominator);

	}

}
